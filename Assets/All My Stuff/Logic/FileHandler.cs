using UnityEngine;
using System.Collections;
using UnityEditor;
using System.IO;
using System.Collections.Generic;
using System;
using System.Linq;

public class FileHandler
{
    
    public void EnsureAvatarUniqueness(string avatarName){
        
        List<string> existingUniqueAvatars = new List<string>();

        UniqueFileSerializer uniqueFileSerializer = new UniqueFileSerializer();
        //check if UniqueFilenameHolder.txt exisits, if not create it
        bool isExists = File.Exists("Assets/All My Stuff/Resources/UniqueAvatarNameHolder.txt");
        if (isExists)
        {
            //load up all the unique file names from the file and start checking avatar file contents for uniqueness
            string text = File.ReadAllText("Assets/All My Stuff/Resources/UniqueAvatarNameHolder.txt");

            uniqueFileSerializer = JsonUtility.FromJson<UniqueFileSerializer>(text);

            //load the avatar for the current filename
            string currentAvatar = File.ReadAllText("Assets/All My Stuff/Resources/AutoGeneratedUniqueAvatars/" + avatarName + ".txt");

            //load other unique avatars and store in a list
            foreach (var file in uniqueFileSerializer.UniqueAvatarNames)
            {
                string exisitngAvater = File.ReadAllText("Assets/All My Stuff/Resources/AutoGeneratedUniqueAvatars/" + file.Name + ".txt");
                existingUniqueAvatars.Add(exisitngAvater);
            }

            //check if the current avatar is unique by simply comparing the string values
            bool isCurrentAvaterDnaStructureExisiting = existingUniqueAvatars.Contains(currentAvatar);

            //if CurrentAvaterDNAStructure is not existing then add the avatarname to 
            //the uniquelist and write to the UniqueAvatarNameHolder.txt
            //else delete the saved current avatar and do not add the name to the list
            if (isCurrentAvaterDnaStructureExisiting == false)
            {
                //get the highest id and add one to it
                int nextId = uniqueFileSerializer.UniqueAvatarNames.Max(prop => prop.Id) + 1;
                uniqueFileSerializer.UniqueAvatarNames.Add(new UniqueAvatarName() {  Id = nextId,Name = avatarName});

                string uniqueFilename = JsonUtility.ToJson(uniqueFileSerializer);
                //overwrite old file with current one
                File.WriteAllText("Assets/All My Stuff/Resources/UniqueAvatarNameHolder.txt", uniqueFilename);
                Debug.Log("Avatar " + avatarName + " is unique");
            }else{
                //remove avatar from the directory
                File.Delete("Assets/All My Stuff/Resources/AutoGeneratedUniqueAvatars/" + avatarName + ".txt");
                Debug.LogWarning("Avatar " + avatarName + " is not uniqueunique and therefore removed from directory");
            }

        }else{
            List<UniqueAvatarName> uniqueAvatarNames = new List<UniqueAvatarName>();
            uniqueAvatarNames.Add(new UniqueAvatarName() { Id = 1, Name = avatarName });
            uniqueFileSerializer.UniqueAvatarNames = uniqueAvatarNames;

            string uniqueFilename = JsonUtility.ToJson(uniqueFileSerializer);

            File.WriteAllText("Assets/All My Stuff/Resources/UniqueAvatarNameHolder.txt", uniqueFilename);
        }

    }
}

[Serializable]
public class UniqueAvatarName{
    public string Name;
    public int Id;
}

[Serializable]
public class UniqueFileSerializer
{
    public List<UniqueAvatarName> UniqueAvatarNames;
}