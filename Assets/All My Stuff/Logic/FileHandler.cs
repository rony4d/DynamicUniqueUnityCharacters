using UnityEngine;
using System.Collections;
using UnityEditor;
using System.IO;
using System.Collections.Generic;
using System;
using System.Linq;
using Newtonsoft.Json;

public class FileHandler
{
    
    public void EnsureAvatarUniqueness(string avatarName,Character character){
                
        List<string> existingUniqueCharactersGenome = new List<string>();
        List<Character> characters = new List<Character>();
        //check if UniqueFilenameHolder.txt exisits, if not create it
        bool isExists = File.Exists("Assets/All My Stuff/Resources/AutoGeneratedUniqueAvatars/UniqueCharacterHolder.txt");
        if (isExists)
        {
            //load up all the characters from the unique character holder file
            string text = File.ReadAllText("Assets/All My Stuff/Resources/AutoGeneratedUniqueAvatars/UniqueCharacterHolder.txt");

            characters = JsonConvert.DeserializeObject<List<Character>>(text);

            //load the avatar for the current filename
            string currentCharacterGenome = File.ReadAllText("Assets/All My Stuff/Resources/AutoGeneratedUniqueAvatars/" + avatarName + ".txt");

            //load other unique avatars and store in a list
            foreach (var uniqueCharacter in characters)
            {
                existingUniqueCharactersGenome.Add(uniqueCharacter.CharacterGenome);
            }

            //check if the current character genome is unique by simply comparing the string values of exisiting genomes
            bool isCurrentAvaterDnaStructureExisiting = existingUniqueCharactersGenome.Contains(currentCharacterGenome);

            //if CurrentAvaterDNAStructure is not existing then add the avatarname to 
            //the uniquelist and write to the UniqueAvatarNameHolder.txt
            //else delete the saved current avatar and do not add the name to the list
            if (isCurrentAvaterDnaStructureExisiting == false)
            {
                //get the highest id and add one to it
                long nextId = characters.Max(prop => prop.Id) + 1;
                character.Id = nextId;
                character.Name = avatarName;
                character.CharacterGenome = currentCharacterGenome;
                characters.Add(character);

                string characterHolderJsonString = JsonConvert.SerializeObject(characters);
                //overwrite old file with current one
                File.WriteAllText("Assets/All My Stuff/Resources/AutoGeneratedUniqueAvatars/UniqueCharacterHolder.txt", characterHolderJsonString);
                Debug.Log("Character " + avatarName + " is unique");
                //delete the current character genome file since we have mapped the containing string to the character object
                File.Delete("Assets/All My Stuff/Resources/AutoGeneratedUniqueAvatars/" + avatarName + ".txt");
            }else{
                //remove avatar from the directory
                File.Delete("Assets/All My Stuff/Resources/AutoGeneratedUniqueAvatars/" + avatarName + ".txt");
                Debug.LogWarning("Avatar " + avatarName + " is not uniqueunique and therefore removed from directory");
            }

        }else{
            string currentCharacterGenome = File.ReadAllText("Assets/All My Stuff/Resources/AutoGeneratedUniqueAvatars/" + avatarName + ".txt");

            character.Id = 1;
            character.Name = avatarName;
            character.CharacterGenome = currentCharacterGenome;
            characters.Add(character);
            string characterHolderJsonString = JsonConvert.SerializeObject(characters);

            File.WriteAllText("Assets/All My Stuff/Resources/AutoGeneratedUniqueAvatars/UniqueCharacterHolder.txt", characterHolderJsonString);
            //delete the current character genome file since we have mapped the containing string to the character object
            File.Delete("Assets/All My Stuff/Resources/AutoGeneratedUniqueAvatars/" + avatarName + ".txt");
        }

    }
}

